# Check if the current `meridian.__version__` semver has been incremented. If so, set a
# `new_version` output.
name: Version check

inputs:
  python_version:
    description: The Python version of the build toolchain to use.
    required: true
    default: 3.11

outputs:
  description: 'The new version if Meridian's semver was incremented, otherwise an empty string.'
  new_version: ${{ steps.version_check.outputs.new_version }}

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Important: fetch all tags for comparison
    # Install deps
    - uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python_version }}
        cache: pip
        cache-dependency-path: '**/pyproject.toml'
    - shell: bash
      run: pip install -e . --config-settings editable_mode=strict
    - shell: bash
      run: pip install semver
    - id: version_check
      name: Check Version
      shell: bash
      # !! This relies on the git repository having "v{major}.{minor}.{patch}" named tags.
      run: |
        CURRENT_VERSION=$(python3 -c "import meridian; print(meridian.__version__)")
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 --match 'v*' 2>/dev/null || echo "v0.0.0")
        PREVIOUS_VERSION=$(echo "$PREVIOUS_TAG" | sed 's/^v//')

        echo "CURRENT_VERSION: $CURRENT_VERSION"
        echo "PREVIOUS_TAG: $PREVIOUS_TAG"
        echo "PREVIOUS_VERSION: $PREVIOUS_VERSION"

        if [[ $(python3 -m semver compare "$CURRENT_VERSION" "$PREVIOUS_VERSION") -eq 1 ]]; then
          echo "New version detected: $CURRENT_VERSION"
          NEW_VERSION=$CURRENT_VERSION
        else
          echo "No version increment detected."
        fi
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
