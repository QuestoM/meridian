# Check if the current `meridian.__version__` semver has been incremented. If so, set a
# `new_version` output.

inputs:
  python_version:
    description: The Python version of the build toolchain to use.
    required: true
    default: 3.11

outputs:
  new_version:
    description: The new version if Meridian's semver was incremented, otherwise an empty string.
    value: ${{ steps.version_check.outputs.new_version }}

runs:
  using: composite
  steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Important: fetch all tags for comparison
        fetch-tags: true
    - uses: ./.github/actions/install-meridian
      with:
        python_version: ${{ inputs.python_version }}
    - shell: bash
      run: pip install semver
    - id: version_check
      name: Check Version
      shell: bash
      # This relies on the git repository having "v{major}.{minor}.{patch}" named tags.
      run: |
        CURRENT_VERSION=$(python3 -c "import meridian; print(meridian.__version__)")

        # Validate CURRENT_VERSION using semver check
        if ! python3 -m semver check "$CURRENT_VERSION"; then
          echo "Error: Invalid semantic version: $CURRENT_VERSION"
          exit 1 # Fail fast
        fi

        #PREVIOUS_TAG=$(git describe --tags --abbrev=0 --match 'v*' 2>/dev/null || echo "v0.0.0")
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 --match 'v*' || { echo "Error: No matching previous tag found." >&2; exit 1; })
        PREVIOUS_VERSION=$(echo "$PREVIOUS_TAG" | sed 's/^v//')

        echo "CURRENT_VERSION: $CURRENT_VERSION"
        echo "PREVIOUS_TAG: $PREVIOUS_TAG"
        echo "PREVIOUS_VERSION: $PREVIOUS_VERSION"

        if [[ $(python3 -m semver compare "$CURRENT_VERSION" "$PREVIOUS_VERSION") -eq 1 ]]; then
          echo "New version detected: $CURRENT_VERSION"
          NEW_VERSION=$CURRENT_VERSION
        else
          echo "No version increment detected."
        fi
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
